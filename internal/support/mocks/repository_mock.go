// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_support is a generated GoMock package.
package mock_support

import (
	context "context"
	support "noname-realtime-support-chat/internal/support"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateSupport mocks base method.
func (m *MockRepository) CreateSupport(ctx context.Context, support *support.Support) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSupport", ctx, support)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSupport indicates an expected call of CreateSupport.
func (mr *MockRepositoryMockRecorder) CreateSupport(ctx, support interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSupport", reflect.TypeOf((*MockRepository)(nil).CreateSupport), ctx, support)
}

// GetSupportByEmail mocks base method.
func (m *MockRepository) GetSupportByEmail(ctx context.Context, id string) (*support.Support, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupportByEmail", ctx, id)
	ret0, _ := ret[0].(*support.Support)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSupportByEmail indicates an expected call of GetSupportByEmail.
func (mr *MockRepositoryMockRecorder) GetSupportByEmail(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupportByEmail", reflect.TypeOf((*MockRepository)(nil).GetSupportByEmail), ctx, id)
}

// GetSupportById mocks base method.
func (m *MockRepository) GetSupportById(ctx context.Context, id string) (*support.Support, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupportById", ctx, id)
	ret0, _ := ret[0].(*support.Support)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSupportById indicates an expected call of GetSupportById.
func (mr *MockRepositoryMockRecorder) GetSupportById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupportById", reflect.TypeOf((*MockRepository)(nil).GetSupportById), ctx, id)
}
