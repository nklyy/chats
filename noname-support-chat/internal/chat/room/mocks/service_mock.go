// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_room is a generated GoMock package.
package mock_room

import (
	context "context"
	room "noname-support-chat/internal/chat/room"
	user "noname-support-chat/internal/user"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateRoom mocks base method.
func (m *MockService) CreateRoom(ctx context.Context, name string, user *user.DTO) (*room.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoom", ctx, name, user)
	ret0, _ := ret[0].(*room.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRoom indicates an expected call of CreateRoom.
func (mr *MockServiceMockRecorder) CreateRoom(ctx, name, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoom", reflect.TypeOf((*MockService)(nil).CreateRoom), ctx, name, user)
}

// DeleteRoom mocks base method.
func (m *MockService) DeleteRoom(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoom", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRoom indicates an expected call of DeleteRoom.
func (mr *MockServiceMockRecorder) DeleteRoom(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoom", reflect.TypeOf((*MockService)(nil).DeleteRoom), ctx, name)
}

// GetRoomByName mocks base method.
func (m *MockService) GetRoomByName(ctx context.Context, name string) (*room.DTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoomByName", ctx, name)
	ret0, _ := ret[0].(*room.DTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoomByName indicates an expected call of GetRoomByName.
func (mr *MockServiceMockRecorder) GetRoomByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoomByName", reflect.TypeOf((*MockService)(nil).GetRoomByName), ctx, name)
}

// GetRoomWithFormatMessages mocks base method.
func (m *MockService) GetRoomWithFormatMessages(ctx context.Context, name, userId string) ([]*room.FormatMessages, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoomWithFormatMessages", ctx, name, userId)
	ret0, _ := ret[0].([]*room.FormatMessages)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoomWithFormatMessages indicates an expected call of GetRoomWithFormatMessages.
func (mr *MockServiceMockRecorder) GetRoomWithFormatMessages(ctx, name, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoomWithFormatMessages", reflect.TypeOf((*MockService)(nil).GetRoomWithFormatMessages), ctx, name, userId)
}

// UpdateRoom mocks base method.
func (m *MockService) UpdateRoom(ctx context.Context, dto *room.DTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoom", ctx, dto)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRoom indicates an expected call of UpdateRoom.
func (mr *MockServiceMockRecorder) UpdateRoom(ctx, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoom", reflect.TypeOf((*MockService)(nil).UpdateRoom), ctx, dto)
}
