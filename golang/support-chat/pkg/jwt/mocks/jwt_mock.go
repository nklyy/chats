// Code generated by MockGen. DO NOT EDIT.
// Source: jwt.go

// Package mock_jwt is a generated GoMock package.
package mock_jwt

import (
	context "context"
	jwt "support-chat/pkg/jwt"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateTokens mocks base method.
func (m *MockService) CreateTokens(ctx context.Context, id string, support bool) (*string, *string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTokens", ctx, id, support)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(*string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateTokens indicates an expected call of CreateTokens.
func (mr *MockServiceMockRecorder) CreateTokens(ctx, id, support interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTokens", reflect.TypeOf((*MockService)(nil).CreateTokens), ctx, id, support)
}

// DeleteTokens mocks base method.
func (m *MockService) DeleteTokens(ctx context.Context, payload *jwt.Payload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTokens", ctx, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTokens indicates an expected call of DeleteTokens.
func (mr *MockServiceMockRecorder) DeleteTokens(ctx, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTokens", reflect.TypeOf((*MockService)(nil).DeleteTokens), ctx, payload)
}

// ExtendExpire mocks base method.
func (m *MockService) ExtendExpire(ctx context.Context, payload *jwt.Payload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtendExpire", ctx, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExtendExpire indicates an expected call of ExtendExpire.
func (mr *MockServiceMockRecorder) ExtendExpire(ctx, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtendExpire", reflect.TypeOf((*MockService)(nil).ExtendExpire), ctx, payload)
}

// ParseToken mocks base method.
func (m *MockService) ParseToken(token string, isAccess bool) (*jwt.Payload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", token, isAccess)
	ret0, _ := ret[0].(*jwt.Payload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockServiceMockRecorder) ParseToken(token, isAccess interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockService)(nil).ParseToken), token, isAccess)
}

// VerifyToken mocks base method.
func (m *MockService) VerifyToken(ctx context.Context, payload *jwt.Payload, isAccess bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyToken", ctx, payload, isAccess)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyToken indicates an expected call of VerifyToken.
func (mr *MockServiceMockRecorder) VerifyToken(ctx, payload, isAccess interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyToken", reflect.TypeOf((*MockService)(nil).VerifyToken), ctx, payload, isAccess)
}
